---
# tasks file for samueljon.hassio_installer_setup
- name: Install extra packages for enterprise linux (epel)
  yum:
      name: epel-release
      state: present
      update_cache: True

- name: install hassio-installer prereqs
  yum:
      name:
          - bash
          - jq
          - curl
          - dbus
          - NetworkManager
      state: present

- name: install Centos 7 prereqs
  yum:
      name:
            # Selinux debug tools
            - setroubleshoot-server
            - firewalld
            - git
            - bash-completion
            - bash-completion-extras
            # Apple Homekit support related
            - avahi-tools
            - avahi-compat-libdns_sd
      state: present
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'


- name: install Centos 8 prereqs
  yum:
      name:
            # Selinux debug tools
            - setroubleshoot-server
            - firewalld
            - git
            - bash-completion
            # Apple Homekit support related
            - avahi
      state: present
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == '8'

- name: start firewalld service and enable at boot
  systemd:
      state: started
      enabled: true
      masked: false
      name: firewalld
  when: not ansible_virtualization_type == 'docker'

- name: Populate service facts
  service_facts:

- name: Allow HTTPS traffic on port 443
  firewalld:
      service: https
      permanent: yes
      immediate: yes
      state: enabled
  when:
      - hassio_fw_enable_https
      - ansible_facts.services["firewalld.service"] is defined
      - ansible_facts.services["firewalld.service"].status == "enabled" or  ansible_facts.services["firewalld.service"].state == "started"
      - not ansible_virtualization_type == 'docker'

- name: Allow HTTP traffic on port 80
  firewalld:
      service: http
      permanent: yes
      immediate: yes
      state: enabled
  when:
      - hassio_fw_enable_http
      - ansible_facts.services["firewalld.service"] is defined
      - ansible_facts.services["firewalld.service"].status == "enabled" or  ansible_facts.services["firewalld.service"].state == "started"
      - not ansible_virtualization_type == 'docker'      

- name: Allow HTTP traffic on port 81
  firewalld:
      port: 81/tcp
      permanent: yes
      immediate: yes
      state: enabled
  when:
      - hassio_fw_enable_proxymanager
      - ansible_facts.services["firewalld.service"] is defined
      - ansible_facts.services["firewalld.service"].status == "enabled" or  ansible_facts.services["firewalld.service"].state == "started"
      - not ansible_virtualization_type == 'docker'      

- name: Allow HTTP traffic on port 8123
  firewalld:
      port: 8123/tcp
      permanent: yes
      immediate: yes
      state: enabled
  when:
      - hassio_fw_enable_homeassistant
      - ansible_facts.services["firewalld.service"] is defined
      - ansible_facts.services["firewalld.service"].status == "enabled" or  ansible_facts.services["firewalld.service"].state == "started"
      - not ansible_virtualization_type == 'docker'      

- name: Allow HTTP traffic on port 8443
  firewalld:
      port: 8443/tcp
      permanent: yes
      immediate: yes
      state: enabled
  when:
      - hassio_fw_enable_unifi
      - ansible_facts.services["firewalld.service"] is defined
      - ansible_facts.services["firewalld.service"].status == "enabled" or  ansible_facts.services["firewalld.service"].state == "started"
      - not ansible_virtualization_type == 'docker'      

- name: Allow multicast dns traffic
  firewalld:
      service: mdns
      permanent: yes
      immediate: yes
      state: enabled
  when:
      - hassio_fw_enable_mdns or hassio_fw_enable_homekit
      - ansible_facts.services["firewalld.service"] is defined
      - ansible_facts.services["firewalld.service"].status == "enabled" or  ansible_facts.services["firewalld.service"].state == "started"
      - not ansible_virtualization_type == 'docker'      

- name: Allow Apple Homekit traffic on port 51827
  firewalld:
      port: 51827/tcp
      permanent: yes
      immediate: yes
      state: enabled
  when:
      - hassio_fw_enable_homekit
      - ansible_facts.services["firewalld.service"] is defined
      - ansible_facts.services["firewalld.service"].status == "enabled" or  ansible_facts.services["firewalld.service"].state == "started"
      - not ansible_virtualization_type == 'docker'      

- name: Allow MQTT traffic on port 1883
  firewalld:
      port: 1883/tcp
      permanent: yes
      immediate: yes
      state: enabled
  when:
      - hassio_fw_enable_mqtt
      - ansible_facts.services["firewalld.service"] is defined
      - ansible_facts.services["firewalld.service"].status == "enabled" or  ansible_facts.services["firewalld.service"].state == "started"
      - not ansible_virtualization_type == 'docker'      

- name: Install docker via geerlingguy.docker role for CentOS 7
  include_role:
      name: geerlingguy.docker
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'        

- name: Download Docker Community Edition Repo
  get_url:
    url: https://download.docker.com/linux/centos/docker-ce.repo
    dest: /etc/yum.repos.d/docker-ce.repo
    mode: '0440'  
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == '8'    

- name: install the latest version of Apache
  yum:
    name:
      - docker-ce 
      - docker-ce-cli
    state: latest
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == '8'

- name: Start Docker Community Edition on Centos 8
  systemd:
    name: docker 
    enabled: yes
    masked: no
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == '8'

- name: Run hassio installer
  shell: |
      set -o pipefail
      curl -sL https://raw.githubusercontent.com/home-assistant/hassio-installer/master/hassio_install.sh | bash -s
  args:
      warn: false
      creates: /etc/systemd/system/hassio-supervisor.service

- name: Wait for 10 seconds for port 8123 to be come available, timeout after 180 secs.
  wait_for:
      port: 8123
      delay: 10
      timeout: 180
